import asyncio
import logging
import sys
import json

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
# from gen_message import generate_message
# from translater import ru, en
from model import save, generate

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è
with open('tg_api.txt', 'r') as file:
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    TOKEN = file.read()

# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    # Most event objects have aliases for API methods that can be called in events' context
    # For example if you want to answer to incoming message you can use `message.answer(...)` alias
    # and the target chat will be passed to :ref:`aiogram.methods.send_message.SendMessage`
    # method automatically or call API method directly via
    # Bot instance: `bot.send_message(chat_id=message.chat.id, ...)`
    greeting = '''
–ü—Ä–∏–≤–µ—Ç, –ø—É—Ç–Ω–∏–∫. –ú—ã, –¥–≤–∞ —Ä–∞–∑—Ä–∞–±–∞, —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –∑–∞—Å–∫–æ—á–∏–ª –∫ –Ω–∞–º.
–ü–æ–∑–≤–æ–ª—å –Ω–∞–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –∏—Å—Ç–æ—Ä–∏—é, –Ω–æ —Å–ø–µ—Ä–≤–∞ –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –≥–ª–∞–≤–Ω—ã–º –≥–µ—Ä–æ–µ–º - /create_character.
–ê –∫–æ–≥–¥–∞ —Ç—ã –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –≤–≤–µ–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤—Ä–æ–¥–µ "–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É", –∏ —Ç–æ–≥–¥–∞ –º—ã –Ω–∞—á–Ω–µ–º —Ä–∞—Å—Å–∫–∞–∑.
–ê —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ....—Ä–µ—à–∞—Ç—å —Ç–µ–±–µ.
<a href="https://github.com/zdarova69/DnD-tg-bot">(–ê –≤–æ—Ç –Ω–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)</a>
    '''
    await message.answer(greeting)


class CharacterCreation(StatesGroup):
    name = State()
    race = State()
    char_class = State()
    strength = State()
    agility = State()
    dexterity = State()
    constitution = State()
    intelligence = State()
    wisdom = State()
    charisma = State()
    background = State()
    finish = State()
    


@dp.message(Command('create_character'))
async def command_start(message: Message, state: FSMContext) -> None:
    await state.set_state(CharacterCreation.race)
    await message.answer("–ö–∞–∫ –∑–æ–≤—É—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è?")


@dp.message(CharacterCreation.race)
async def process_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    await state.set_state(CharacterCreation.char_class)
    await message.answer(
        f"–≤—ã–±–µ—Ä–∏ —Ä–∞—Å—É",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="üßù‚Äç‚ôÇÔ∏è —á–µ–ª–æ–≤–µ–∫"),
                    KeyboardButton(text="üßùüèª‚Äç‚ôÇÔ∏è —ç–ª—å—Ñ"),
                    KeyboardButton(text="üßù‚Äç‚ôÄÔ∏è –ø–æ–ª—É—ç–ª—å—Ñ"),
                    KeyboardButton(text="üßî –¥–≤–æ—Ä—Ñ"),
                    KeyboardButton(text="üëø —Ç–∏—Ñ–ª–∏–Ω–≥"),
                    KeyboardButton(text="ü¶πüèø‚Äç‚ôÇÔ∏è –¥—Ä–æ—É"),
                    KeyboardButton(text="üêâ –≥–∏—Ç—å—è–Ω–∫–∏"),
                    KeyboardButton(text="üë∂ –≥–Ω–æ–º—ã"),
                    KeyboardButton(text="üßü –ø–æ–ª—É–æ—Ä–∫–∏"),
                    KeyboardButton(text="üê≤ –¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ"),
                ]
            ],
            resize_keyboard=True,
        ),
    )


@dp.message(CharacterCreation.char_class)
async def process_race(message: types.Message, state: FSMContext):
    await state.update_data(race=message.text)
    await state.set_state(CharacterCreation.strength)
    await message.answer(
        f"–≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="‚öîÔ∏è –≤–æ–∏–Ω"),
                    KeyboardButton(text="ü™ì –≤–∞—Ä–≤–∞—Ä"),
                    KeyboardButton(text="üéµ –±–∞—Ä–¥"),
                    KeyboardButton(text="üåø –¥—Ä—É–∏–¥"),
                    KeyboardButton(text="üßôüèª‚Äç‚ôÄÔ∏è –∂—Ä–µ—Ü"),
                    KeyboardButton(text="üîÆ –∫–æ–ª–¥—É–Ω"),
                    KeyboardButton(text="üßô‚Äç‚ôÇÔ∏è –≤–æ–ª—à–µ–±–Ω–∏–∫"),
                    KeyboardButton(text="‚ú® —á–∞—Ä–æ–¥–µ–π"),
                    KeyboardButton(text="ü•ã –º–æ–Ω–∞—Ö"),
                    KeyboardButton(text="üë£ —Å–ª–µ–¥–æ–ø—ã—Ç"),
                    KeyboardButton(text="üó°Ô∏è –ø–ª—É—Ç")
                ]
            ],
            resize_keyboard=True,
        ),
    )

i = 60

@dp.message(CharacterCreation.strength)
async def process_strength(message: types.Message, state: FSMContext):
    await state.update_data(char_class=message.text)
    await state.set_state(CharacterCreation.agility)
    await message.answer(
        f"–£–∫–∞–∂–∏ —Å–∏–ª—É: –º–∞–∫—Å–∏–º—É–º 18\n(–æ—Å—Ç–∞–ª–æ—Å—å {i} –æ—á–∫–æ–≤)",
        reply_markup=ReplyKeyboardRemove(),

    )



@dp.message(CharacterCreation.agility)
async def process_agility(message: types.Message, state: FSMContext):
    global i  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é i
    try:    
        value = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if value > 18 or value > i:      
            100 / 0
        else:
            i -= value  # –í—ã—á–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ i    
            await state.update_data(agility=value)
            await state.update_data(strength=value)
            await state.update_data(i=i)
            await state.set_state(CharacterCreation.dexterity)
            await message.answer(
        f"–£–∫–∞–∂–∏ –ª–æ–≤–∫–æ—Å—Ç—å: –º–∞–∫—Å–∏–º—É–º 18\n(–æ—Å—Ç–∞–ª–æ—Å—å {i} –æ—á–∫–æ–≤)",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    except (ValueError, ZeroDivisionError) as e:
        await message.reply(f"–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    
 


@dp.message(CharacterCreation.dexterity)
async def process_dexterity(message: types.Message, state: FSMContext):
    global i  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é i
    try:    
        value = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if value > 18 or value > i:      
            100 / 0
        else:
            i -= value  # –í—ã—á–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ i
            await state.update_data(agility=int(message.text))
            await state.update_data(i=i)
            await state.set_state(CharacterCreation.constitution)
            await message.reply(f"–£–∫–∞–∂–∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: –º–∞–∫—Å–∏–º—É–º 18\n(–æ—Å—Ç–∞–ª–æ—Å—å {i} –æ—á–∫–æ–≤)")   
    except (ValueError, ZeroDivisionError) as e:
        await message.reply(f"–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    

@dp.message(CharacterCreation.constitution)
async def process_constitution(message: types.Message, state: FSMContext):
    global i  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é i
    try:    
        value = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if value > 18 or value > i:      
            100 / 0
        else:
            i -= value  # –í—ã—á–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ i
            await state.update_data(agility=int(message.text))
            await state.update_data(agility=int(message.text))
            await state.update_data(dexterity=int(message.text))
            await state.update_data(i=i)
            await state.set_state(CharacterCreation.intelligence)
            await message.reply(f"–£–∫–∞–∂–∏ –∂–∏–≤—É—á–µ—Å—Ç—å: –º–∞–∫—Å–∏–º—É–º 18\n(–æ—Å—Ç–∞–ª–æ—Å—å {i} –æ—á–∫–æ–≤)")
    except (ValueError, ZeroDivisionError) as e:
        await message.reply(f"–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    


@dp.message(CharacterCreation.intelligence)
async def process_intelligence(message: types.Message, state: FSMContext):
    global i  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é i
    try:    
        value = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if value > 18 or value > i:      
            100 / 0
        else:
            i -= value  # –í—ã—á–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ i
            await state.update_data(agility=int(message.text))
            await state.update_data(agility=int(message.text))
            await state.update_data(constitution=int(message.text))
            await state.update_data(i=i)
            await state.set_state(CharacterCreation.charisma)
            await message.reply(f"–£–∫–∞–∂–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: –º–∞–∫—Å–∏–º—É–º 18\n(–æ—Å—Ç–∞–ª–æ—Å—å {i} –æ—á–∫–æ–≤)")   
    except (ValueError, ZeroDivisionError) as e:
        await message.reply(f"–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    

@dp.message(CharacterCreation.charisma)
async def process_charisma(message: types.Message, state: FSMContext):
    global i  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é i
    try:    
        value = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if value > 18 or value > i:      
            100 / 0
        else:
            i -= value  # –í—ã—á–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ i
            await state.update_data(agility=int(message.text))
            await state.update_data(intelligence=int(message.text))
            await state.update_data(i=i)
            await state.set_state(CharacterCreation.wisdom)
            await message.reply(f"–£–∫–∞–∂–∏ —Ö–∞—Ä–∏–∑–º—É: –º–∞–∫—Å–∏–º—É–º 18\n(–æ—Å—Ç–∞–ª–æ—Å—å {i} –æ—á–∫–æ–≤)")
    except (ValueError, ZeroDivisionError) as e:
        await message.reply(f"–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    

@dp.message(CharacterCreation.wisdom)
async def process_wisdom(message: types.Message, state: FSMContext):
    global i  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é i
    try:    
        value = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if value > 18 or value > i:      
            100 / 0
        else:
            i -= value  # –í—ã—á–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ i
            await state.update_data(agility=int(message.text))
            await state.update_data(charisma=int(message.text))
            await state.update_data(i=i)
            await state.set_state(CharacterCreation.background)
            await message.reply(f"–£–∫–∞–∂–∏ –º—É–¥—Ä–æ—Å—Ç—å: –º–∞–∫—Å–∏–º—É–º 18\n(–æ—Å—Ç–∞–ª–æ—Å—å {i} –æ—á–∫–æ–≤)")
    except (ValueError, ZeroDivisionError) as e:
        await message.reply(f"–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")


@dp.message(CharacterCreation.background)
async def process_background(message: types.Message, state: FSMContext):
    await state.update_data(wisdom=int(message.text))
    await state.set_state(CharacterCreation.finish)
    await message.reply("–ê —Ç–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π, –∫–∞–∫–∞—è —É —Ç–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è –±—ã–ª–∞ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è, –∏ –Ω–∞–ø–∏—à–∏ –µ—ë —Å—é–¥–∞.")

    

@dp.message(CharacterCreation.finish)
async def complete_customization(message: types.Message, state: FSMContext):
    await state.update_data(background=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    character = {
        'name': data['name'],
        'race': data['race'],
        'class': data['char_class'],
        'strength': data['strength'],
        'agility': data['agility'],
        'dexterity': data['dexterity'],
        'constitution': data['constitution'],
        'intelligence': data['intelligence'],
        'charisma': data['charisma'],
        'wisdom': data['wisdom']
    }

    with open(f'characters_{user_id}.json', 'w', encoding='utf-8') as f:
        json.dump(character, f, ensure_ascii=False)

    await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    current_state = await state.get_state()
    await message.reply(f'''
–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
–ò–º—è - {data['name']},
–†–∞—Å–∞ - {data['race']},
–ö–ª–∞—Å—Å - {data['char_class']},
–°–∏–ª–∞ - {data['strength']},
–õ–æ–≤–∫–æ—Å—Ç—å - {data['agility']},
–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å - {data['dexterity']},
–ñ–∏–≤—É—á–µ—Å—Ç—å - {data['constitution']},
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç - {data['intelligence']},
–•–∞—Ä–∏–∑–º–∞ - {data['charisma']},
–ú—É–¥—Ä–æ—Å—Ç—å - {data['wisdom']},
<b>–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è</b>:
<i>{data['background']}</i>
    ''')
    await message.reply(await generate(f'''
    –ó–∞–ø–æ–º–Ω–∏, –≤–æ—Ç –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π:
    –ò–º—è - {data['name']}
    –†–∞—Å–∞ - {data['race']}
    –ö–ª–∞—Å—Å - {data['char_class']}
    –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:
    {data['background']}
        ''', user_id=user_id))
    if current_state is None:
        return
    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer(
        "Cancelled.",
        reply_markup=ReplyKeyboardRemove(),
    )


@dp.message()
async def echo_handler(message: Message) -> None:
    """
    Handler will forward receive a message back to the sender

    By default, message handler will handle all message types (like a text, photo, sticker etc.)
    """
    try:
        # Send a copy of the received message
        await save(message.text)
        await message.reply(await generate(message.text, user_id=message.from_user.id))
    except TypeError:
        # But not all the types is supported to be copied so need to handle it
        await message.answer("Nice try!")


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
